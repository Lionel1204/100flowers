%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: lionel shen
%%Title: Window .!canvas
%%CreationDate: Mon Apr 27 19:27:04 2020
%%BoundingBox: -113 3 726 790
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id$

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
1.001 1.001 scale
4 -392 translate
-423 785 moveto 415 785 lineto 415 0 lineto -423 0 lineto closepath clip newpath
gsave
grestore
gsave
grestore
gsave
0 388 moveto
0 388 lineto
1 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
0 388 moveto
100 388 lineto
185 388 lineto
108.417646228294 351.119882175008 lineto
161.414279386287 417.57555818479 lineto
142.5 334.706685649335 lineto
123.585720613713 417.57555818479 lineto
176.582353771706 351.119882175008 lineto
100 388 lineto
20 388 lineto
106.602540378444 338 lineto
180.214699700121 295.5 lineto
95.4523769397209 301.852057954846 lineto
174.576645574478 332.90604502599 lineto
116.76196286395 270.596635920454 lineto
141.816152688877 351.820324412276 lineto
154.484745313852 267.76970418314 lineto
106.602540378444 338 lineto
37.3205080756887 378 lineto
87.3205080756889 291.397459621556 lineto
129.820508075689 217.785300299879 lineto
59.5902122588294 265.667505235287 lineto
143.640832487965 252.998912610312 lineto
62.4171439961434 227.944722785385 lineto
124.726553101678 285.759405495913 lineto
93.6725660305352 206.635136861156 lineto
87.3205080756888 291.397459621556 lineto
47.3205080756887 360.679491924311 lineto
47.320508075689 260.679491924311 lineto
47.3205080756892 175.679491924311 lineto
10.4403902506966 252.261845696017 lineto
76.8960662604792 199.265212538024 lineto
-5.97280627497577 218.179491924311 lineto
76.8960662604791 237.093771310598 lineto
10.4403902506968 184.097138152605 lineto
47.3205080756889 260.679491924311 lineto
47.3205080756886 340.679491924311 lineto
-2.67949192431099 254.076951545867 lineto
-45.1794919243106 180.46479222419 lineto
-38.827433969465 265.22711498459 lineto
-7.77344689832105 186.102846349833 lineto
-70.0828560038565 243.917529060361 lineto
11.1408324879655 218.863339235434 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
11.1408324879655 218.863339235434 moveto
-72.9097877411703 206.194746610459 lineto
-2.67949192431104 254.076951545867 lineto
37.3205080756886 323.358983848622 lineto
-49.282032302755 273.358983848622 lineto
-122.894191624432 230.858983848621 lineto
-75.0119866890245 301.089279665481 lineto
-87.6805793139988 217.038659436345 lineto
-112.734769138926 298.262347928167 lineto
-54.9200864283977 235.952938822632 lineto
-134.044355063155 267.006925893775 lineto
-49.282032302755 273.358983848622 lineto
19.9999999999998 313.358983848622 lineto
-80.0000000000001 313.358983848622 lineto
-165 313.358983848621 lineto
-88.4176462282947 350.239101673614 lineto
-141.414279386287 283.783425663831 lineto
-122.5 366.652298199286 lineto
-103.585720613713 283.783425663831 lineto
-156.582353771706 350.239101673613 lineto
-80.0000000000001 313.358983848622 lineto
-2.41584530158434e-13 313.358983848622 lineto
-86.6025403784444 363.358983848622 lineto
-160.214699700122 405.858983848621 lineto
-75.4523769397216 399.506925893775 lineto
-154.576645574479 368.452938822631 lineto
-96.7619628639511 430.762347928167 lineto
-121.816152688877 349.538659436345 lineto
-134.484745313853 433.589279665481 lineto
-86.6025403784443 363.358983848622 lineto
-17.320508075689 323.358983848622 lineto
-67.3205080756897 409.961524227066 lineto
-109.82050807569 483.573683548742 lineto
-39.5902122588304 435.691478613335 lineto
-123.640832487966 448.360071238309 lineto
-42.4171439961447 473.414261063237 lineto
-104.726553101679 415.599578352708 lineto
-73.6725660305365 494.723846987466 lineto
-67.3205080756897 409.961524227066 lineto
-27.3205080756891 340.679491924311 lineto
-27.3205080756901 440.679491924311 lineto
-27.3205080756909 525.679491924311 lineto
9.55960974930224 449.097138152606 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
9.55960974930224 449.097138152606 moveto
-56.8960662604807 502.093771310597 lineto
25.9728062749743 483.179491924311 lineto
-56.8960662604803 464.265212538024 lineto
9.55960974930153 517.261845696017 lineto
-27.32050807569 440.679491924311 lineto
-27.3205080756891 360.679491924311 lineto
22.6794919243098 447.282032302755 lineto
65.1794919243089 520.894191624433 lineto
58.8274339694638 436.131868864033 lineto
27.7734468983194 515.256137498789 lineto
90.0828560038552 457.441454788262 lineto
8.85916751203308 482.495644613188 lineto
92.9097877411687 495.164237238164 lineto
22.6794919243098 447.282032302755 lineto
-17.3205080756893 378 lineto
69.2820323027538 428.000000000001 lineto
142.89419162443 470.500000000001 lineto
95.0119866890235 400.269704183141 lineto
107.680579313997 484.320324412277 lineto
132.734769138925 403.096635920456 lineto
74.9200864283963 465.40604502599 lineto
154.044355063154 434.352057954848 lineto
69.2820323027538 428.000000000001 lineto
-5.54223333892878e-13 388 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
grestore
restore showpage

%%Trailer
end
%%EOF
