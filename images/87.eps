%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: lionel shen
%%Title: Window .!canvas
%%CreationDate: Tue Apr 28 19:34:54 2020
%%BoundingBox: -113 3 726 790
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id$

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
1.001 1.001 scale
4 -392 translate
-423 785 moveto 415 785 lineto 415 0 lineto -423 0 lineto closepath clip newpath
gsave
grestore
gsave
grestore
gsave
0 388 moveto
0 388 lineto
1 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
0 388 moveto
9.79717439317883e-15 548 lineto
138.56406460551 468 lineto
5.6843418860808e-14 388 lineto
113.137084989848 501.137084989848 lineto
154.548132206251 346.588952783597 lineto
5.6843418860808e-14 388 lineto
160 388 lineto
80.0000000000003 249.43593539449 lineto
0 388 lineto
113.137084989848 274.862915010152 lineto
-41.4110472164029 233.451867793749 lineto
-6.3948846218409e-14 388 lineto
4.9560355819267e-13 228 lineto
-138.56406460551 307.999999999999 lineto
-1.13686837721616e-13 388 lineto
-113.137084989847 274.862915010152 lineto
-154.548132206251 429.411047216402 lineto
-1.4210854715202e-13 388 lineto
-160 387.999999999999 lineto
-80.000000000001 526.56406460551 lineto
-9.9475983006414e-14 388 lineto
-113.137084989848 501.137084989847 lineto
41.4110472164023 542.548132206251 lineto
-4.2632564145606e-14 388 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
-160 388 moveto
-157.578490255786 415.677983028014 lineto
-150.387537371379 442.514984547458 lineto
-138.645634811373 467.69557584734 lineto
-122.709554343365 490.454657403008 lineto
-103.063505708329 510.100706038044 lineto
-80.3044241526613 526.036786506052 lineto
-55.1238328527793 537.778689066058 lineto
-28.2868313333361 544.969641950466 lineto
-0.608848305321761 547.391151694681 lineto
27.0691347226926 544.969641950467 lineto
53.906136242136 537.778689066059 lineto
79.0867275420181 526.036786506053 lineto
101.845809097686 510.100706038045 lineto
121.491857732722 490.45465740301 lineto
137.42793820073 467.695575847342 lineto
149.169840760737 442.51498454746 lineto
156.360793645144 415.677983028017 lineto
158.782303389359 388.000000000002 lineto
156.360793645145 360.322016971988 lineto
149.169840760737 333.485015452545 lineto
137.427938200731 308.304424152662 lineto
121.491857732723 285.545342596994 lineto
101.845809097688 265.899293961959 lineto
79.0867275420201 249.96321349395 lineto
53.9061362421381 238.221310933944 lineto
27.0691347226948 231.030358049536 lineto
-0.608848305319494 228.608848305322 lineto
-28.2868313333339 231.030358049536 lineto
-55.1238328527772 238.221310933943 lineto
-80.3044241526594 249.963213493949 lineto
-103.063505708327 265.899293961957 lineto
-122.709554343363 285.545342596993 lineto
-138.645634811372 308.30442415266 lineto
-150.387537371378 333.485015452542 lineto
-157.578490255786 360.322016971986 lineto
-160 388 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
-180 388 moveto
-177.275801537759 419.137730906516 lineto
-169.185979542801 449.32935761589 lineto
-155.976339162794 477.657522828257 lineto
-138.048248636285 503.261489578384 lineto
-115.94644392187 525.363294292799 lineto
-90.342477171744 543.291384819309 lineto
-62.0143119593768 556.501025199316 lineto
-31.8226852500031 564.590847194275 lineto
-0.684954343486911 567.315045656516 lineto
30.4527765630293 564.590847194275 lineto
60.6444032724031 556.501025199317 lineto
88.9725684847705 543.29138481931 lineto
114.576535234897 525.363294292801 lineto
136.678339949312 503.261489578386 lineto
154.606430475822 477.65752282826 lineto
167.816070855829 449.329357615893 lineto
175.905892850788 419.137730906519 lineto
178.630091313029 388.000000000003 lineto
175.905892850788 356.862269093486 lineto
167.81607085583 326.670642384113 lineto
154.606430475823 298.342477171745 lineto
136.678339949314 272.738510421619 lineto
114.576535234899 250.636705707203 lineto
88.972568484773 232.708615180694 lineto
60.6444032724058 219.498974800687 lineto
30.452776563032 211.409152805728 lineto
-0.684954343484122 208.684954343487 lineto
-31.8226852500003 211.409152805727 lineto
-62.0143119593742 219.498974800686 lineto
-90.3424771717417 232.708615180692 lineto
-115.946443921868 250.636705707201 lineto
-138.048248636284 272.738510421616 lineto
-155.976339162793 298.342477171743 lineto
-169.1859795428 326.67064238411 lineto
-177.275801537759 356.862269093484 lineto
-180 388 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
grestore
restore showpage

%%Trailer
end
%%EOF
