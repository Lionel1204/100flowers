%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: lionel shen
%%Title: Window .!canvas
%%CreationDate: Mon Apr 27 19:23:11 2020
%%BoundingBox: -113 3 726 790
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id$

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
1.001 1.001 scale
4 -392 translate
-423 785 moveto 415 785 lineto 415 0 lineto -423 0 lineto closepath clip newpath
gsave
grestore
gsave
grestore
gsave
0 388 moveto
0 388 lineto
1 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
0 388 moveto
100 388 lineto
170.710678118655 317.289321881345 lineto
70.7106781186548 317.289321881345 lineto
-1.4210854715202e-14 388 lineto
80 388 lineto
136.568542494924 331.431457505076 lineto
56.5685424949238 331.431457505076 lineto
-2.8421709430404e-14 388 lineto
60 388 lineto
102.426406871193 345.573593128807 lineto
42.4264068711929 345.573593128807 lineto
-3.5527136788005e-14 388 lineto
40 388 lineto
68.2842712474619 359.715728752538 lineto
28.2842712474619 359.715728752538 lineto
-3.19744231092045e-14 388 lineto
70.7106781186548 317.289321881345 lineto
70.710678118655 217.289321881345 lineto
9.9475983006414e-14 288 lineto
-5.59552404411079e-14 388 lineto
56.5685424949238 331.431457505076 lineto
56.568542494924 251.431457505076 lineto
7.8159700933611e-14 308 lineto
-6.83897383169096e-14 388 lineto
42.4264068711929 345.573593128807 lineto
42.426406871193 285.573593128807 lineto
4.2632564145606e-14 328 lineto
-9.05941988094128e-14 388 lineto
28.2842712474619 359.715728752538 lineto
28.284271247462 319.715728752538 lineto
0 348 lineto
-9.99200722162641e-14 388 lineto
1.66533453693773e-13 288 lineto
-70.7106781186544 217.289321881345 lineto
-70.7106781186547 317.289321881345 lineto
-1.27897692436818e-13 388 lineto
1.07469588783715e-13 308 lineto
-56.5685424949235 251.431457505076 lineto
-56.5685424949238 331.431457505076 lineto
-1.49213974509621e-13 388 lineto
5.06261699229071e-14 328 lineto
-42.4264068711927 285.573593128807 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
-42.4264068711927 285.573593128807 moveto
-42.4264068711929 345.573593128807 lineto
-1.63424829224823e-13 388 lineto
-1.90958360235527e-14 348 lineto
-28.2842712474618 319.715728752538 lineto
-28.284271247462 359.715728752538 lineto
-1.74082970261225e-13 388 lineto
-70.7106781186546 317.289321881345 lineto
-170.710678118655 317.289321881344 lineto
-100 387.999999999999 lineto
-1.84741111297626e-13 388 lineto
-56.5685424949237 331.431457505076 lineto
-136.568542494924 331.431457505076 lineto
-80.0000000000002 388 lineto
-1.98951966012828e-13 388 lineto
-42.4264068711929 345.573593128807 lineto
-102.426406871193 345.573593128807 lineto
-60.0000000000002 388 lineto
-2.06057393370429e-13 388 lineto
-28.284271247462 359.715728752538 lineto
-68.284271247462 359.715728752538 lineto
-40.0000000000002 388 lineto
-1.98951966012828e-13 388 lineto
-100 387.999999999999 lineto
-170.710678118655 458.710678118654 lineto
-70.7106781186553 458.710678118654 lineto
-1.70530256582424e-13 388 lineto
-80.0000000000002 388 lineto
-136.568542494924 444.568542494923 lineto
-56.5685424949243 444.568542494923 lineto
-1.56319401867222e-13 388 lineto
-60.0000000000002 388 lineto
-102.426406871193 430.426406871192 lineto
-42.4264068711933 430.426406871193 lineto
-1.49213974509621e-13 388 lineto
-40.0000000000001 388 lineto
-68.2842712474622 416.284271247461 lineto
-28.2842712474622 416.284271247462 lineto
-1.4210854715202e-13 388 lineto
-70.7106781186554 458.710678118654 lineto
-70.710678118656 558.710678118654 lineto
-7.95807864051312e-13 488 lineto
-1.07469588783715e-13 388 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
-1.07469588783715e-13 388 moveto
-56.5685424949243 444.568542494923 lineto
-56.5685424949249 524.568542494923 lineto
-6.67910171614494e-13 468 lineto
-9.50350909079134e-14 388 lineto
-42.4264068711933 430.426406871193 lineto
-42.4264068711937 490.426406871193 lineto
-5.25801624462474e-13 448 lineto
-7.28306304154103e-14 388 lineto
-28.2842712474622 416.284271247462 lineto
-28.2842712474625 456.284271247462 lineto
-3.73034936274053e-13 428 lineto
-5.99520433297585e-14 388 lineto
-8.59312621059871e-13 488 lineto
70.7106781186533 558.710678118655 lineto
70.7106781186542 458.710678118655 lineto
-1.4210854715202e-14 388 lineto
-6.75903777391795e-13 468 lineto
56.5685424949227 524.568542494924 lineto
56.5685424949233 444.568542494924 lineto
1.4210854715202e-14 388 lineto
-5.05373520809371e-13 448 lineto
42.426406871192 490.426406871193 lineto
42.4264068711925 430.426406871193 lineto
3.5527136788005e-14 388 lineto
-3.21964677141295e-13 428 lineto
28.2842712474613 456.284271247462 lineto
28.2842712474617 416.284271247462 lineto
4.9737991503207e-14 388 lineto
70.7106781186541 458.710678118655 lineto
170.710678118654 458.710678118656 lineto
100 388.000000000001 lineto
5.6843418860808e-14 388 lineto
56.5685424949233 444.568542494924 lineto
136.568542494923 444.568542494925 lineto
80.0000000000001 388.000000000001 lineto
7.105427357601e-14 388 lineto
42.4264068711925 430.426406871193 lineto
102.426406871192 430.426406871194 lineto
60.0000000000001 388.000000000001 lineto
7.8159700933611e-14 388 lineto
28.2842712474617 416.284271247462 lineto
68.2842712474617 416.284271247463 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
68.2842712474617 416.284271247463 moveto
40.0000000000001 388 lineto
8.5265128291212e-14 388 lineto
1 setlinecap
1 setlinejoin
3 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
grestore
restore showpage

%%Trailer
end
%%EOF
